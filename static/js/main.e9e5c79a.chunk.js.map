{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/Search/search.component.jsx","components/scroll/scroll.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","alt","src","concat","monster","id","name","email","CardList","monsters","map","card_component_Card","key","SearchBox","_ref","placeholder","handleChange","type","onChange","Scroll","class","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChangeEvent","event","setState","searchField","target","value","state","_this2","fetch","then","response","json","users","_this$state","filteredMonster","filter","toLowerCase","includes","search_component_SearchBox","scroll_component","card_list_component_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sUAGaA,eAAO,SAACC,GAAD,OAChBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,UAAUC,IAAG,wBAAAC,OAA0BP,EAAMQ,QAAQC,GAAxC,4BACtBR,EAAAC,EAAAC,cAAA,UAAKH,EAAMQ,QAAQE,MACnBT,EAAAC,EAAAC,cAAA,SAAIH,EAAMQ,QAAQG,UCHbC,EAAW,SAACZ,GACrB,OACAC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAEPJ,EAAMa,SAASC,IAAI,SAAAN,GAAO,OAC1BP,EAAAC,EAAAC,cAACY,EAAD,CAAMC,IAAKR,EAAQC,GAAID,QAASA,QCN/BS,SAAY,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,YAAaC,EAAfF,EAAeE,aAAf,OACrBnB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAOkB,KAAK,SAASjB,UAAU,SAASe,YAAaA,EAAaG,SAAUF,OCMrEG,SARA,SAACvB,GACZ,OACIC,EAAAC,EAAAC,cAAA,OAAKqB,MAAM,UACNxB,EAAMyB,YCsCJC,qBArCb,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACXC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAcFI,kBAAoB,SAACC,GACnBR,EAAKS,SAAS,CAACC,YAAcF,EAAMG,OAAOC,SAb1CZ,EAAKa,MAAQ,CACX3B,SAAU,GACVwB,YAAa,IALJV,mFASM,IAAAc,EAAAX,KACjBY,MAAM,8CACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAK,OAAIL,EAAKL,SAAS,CAACvB,SAAWiC,uCAOrC,IAAAC,EAC0BjB,KAAKU,MAA9B3B,EADDkC,EACClC,SAAUwB,EADXU,EACWV,YACXW,EAAkBnC,EAASoC,OAAO,SAAAzC,GACtC,OAAOA,EAAQE,KAAKwC,cAAcC,SAASd,EAAYa,iBAGzD,OACEjD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAACiD,EAAD,CAAWjC,YAAY,iBAAiBC,aAAcU,KAAKI,oBAC3DjC,EAAAC,EAAAC,cAACkD,EAAD,KACEpD,EAAAC,EAAAC,cAACmD,EAAD,CAAUzC,SAAUmC,aA/BZO,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7D,EAAAC,EAAAC,cAAC4D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.e9e5c79a.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../card/card.style.css';\r\n\r\nexport const Card = (props) => (\r\n    <div className=\"card-container\">\r\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n        <h2>{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n);\r\n","import React from 'react';\r\nimport './card-list.style.css';\r\nimport { Card } from '../card/card.component';\r\n\r\nexport const CardList = (props) => {\r\n    return (\r\n    <div className=\"card-list\">\r\n        {\r\n            props.monsters.map(monster => (\r\n            <Card key={monster.id} monster={monster} />\r\n          ))}\r\n    </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport './search.style.css';\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n    <div>\r\n        <input type=\"search\" className=\"search\" placeholder={placeholder} onChange={handleChange}/>\r\n    </div>\r\n);","import React from 'react';\r\nimport './scroll.style.css';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div class=\"scroll\">\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport {CardList} from './components/card-list/card-list.component';\r\nimport {SearchBox} from './components/Search/search.component';\r\nimport Scroll from './components/scroll/scroll.component';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor(){\r\n    super();\r\n\r\n    this.state = {\r\n      monsters: [],\r\n      searchField: ''\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response => response.json())\r\n      .then(users => this.setState({monsters : users }))\r\n  }\r\n\r\n  handleChangeEvent = (event) => {\r\n    this.setState({searchField : event.target.value})\r\n  }\r\n\r\n  render(){\r\n    const {monsters, searchField} = this.state;\r\n    const filteredMonster = monsters.filter(monster => {\r\n      return monster.name.toLowerCase().includes(searchField.toLowerCase())\r\n    });\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Monster Rolodex</h1>\r\n        <SearchBox placeholder=\"search monster\" handleChange={this.handleChangeEvent}/>\r\n        <Scroll>\r\n          <CardList monsters={filteredMonster} />\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}